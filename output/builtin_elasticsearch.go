// Copyright 2021 The sypl Authors. All rights reserved.
// Use of this source code is governed by a MIT
// license that can be found in the LICENSE file.

package output

import (
	"fmt"

	"github.com/thalesfsp/sypl/elasticsearch"
	"github.com/thalesfsp/sypl/formatter"
	"github.com/thalesfsp/sypl/level"
	"github.com/thalesfsp/sypl/processor"
)

//////
// Consts, vars, and types.
//////

// ElasticSearchConfig is the ElasticSearch configuration.
type ElasticSearchConfig = elasticsearch.Config

// ElasticSearchDynamicIndexFunc is a function which defines the name of the
// index and is evaluated at the index time.
type ElasticSearchDynamicIndexFunc = elasticsearch.DynamicIndexFunc

// ElasticSearchTagMapItem is an item of the ElasticSearch tag map.
type ElasticSearchTagMapItem struct {
	DynamicIndexFunc ElasticSearchDynamicIndexFunc
	Level            level.Level
}

// ElasticSearchTagMap is a map of tags to index names.
type ElasticSearchTagMap = map[string]ElasticSearchTagMapItem

//////
// Helpers.
//////

// NewElasticSearchTagMapItem is a helper to create `ElasticSearchTagMapItem`.
func NewElasticSearchTagMapItem(
	l level.Level,
	dynamicIndexFunc ElasticSearchDynamicIndexFunc,
) ElasticSearchTagMapItem {
	return ElasticSearchTagMapItem{
		DynamicIndexFunc: dynamicIndexFunc,
		Level:            l,
	}
}

//////
// Factory.
//////

// elasticSearchFactory builds ElasticSearch outputs.
func elasticSearchFactory(
	outputName string,
	dynamicIndexFunc ElasticSearchDynamicIndexFunc,
	esConfig ElasticSearchConfig,
	maxLevel level.Level,
	processors ...processor.IProcessor,
) IOutput {
	o := New(outputName,
		maxLevel,
		elasticsearch.NewWithDynamicIndex(dynamicIndexFunc, esConfig),
		processors...,
	).SetFormatter(formatter.JSON())

	return o
}

//////
// Builtins.
//////

// ElasticSearch is a built-in `output` - named `ElasticSearch`, that writes to
// ElasticSearch.
//
// NOTE: By default, data is JSON-formatted.
// NOTE: Document ID is automatically generated by hashing the message's content
// avoiding duplicate documents.
// NOTE: It's the caller's responsibility to create the index, define its
// mapping, and settings.
func ElasticSearch(
	indexName string,
	esConfig ElasticSearchConfig,
	maxLevel level.Level,
	processors ...processor.IProcessor,
) IOutput {
	return elasticSearchFactory(
		"ElasticSearch",
		func() string { return indexName },
		esConfig,
		maxLevel,
		processors...,
	)
}

// ElasticSearchWithTagMap is a built-in `output` - named
// `ElasticSearchWithTagMap-{tag}` that writes to ElasticSearch. It allows to
// define a map of tags and indexes. The index name is a function which defines
// the name of the index and is evaluated at the index time.
//
// IT'S THE CALLER'S RESPONSIBILITY TO DEFINE A CATCH-ALL INDEX - IF DESIRED.
// TO ACHIEVE THIS, USE `*` AS THE TAG NAME.
//
// NOTE: By default, data is JSON-formatted.
// NOTE: Document ID is automatically generated by hashing the message's content
// avoiding duplicate documents.
// NOTE: It's the caller's responsibility to create the index, define its
// mapping, and settings.
func ElasticSearchWithTagMap(
	tagMap ElasticSearchTagMap,
	esConfig ElasticSearchConfig,
	processors ...processor.IProcessor,
) []IOutput {
	outputs := make([]IOutput, 0, len(tagMap))
	tags := make([]string, 0, len(tagMap))

	var eSTMI ElasticSearchTagMapItem

	for tag, elasticSearchTagMapItem := range tagMap {
		if tag == "*" {
			eSTMI = elasticSearchTagMapItem
		} else {
			outputs = append(outputs, elasticSearchFactory(
				fmt.Sprintf("ElasticSearchWithTagMap-%s", tag),
				elasticSearchTagMapItem.DynamicIndexFunc,
				esConfig,
				elasticSearchTagMapItem.Level,
				append(processors, processor.PrintOnlyIfTagged(tag))...,
			))

			tags = append(tags, tag)
		}
	}

	if eSTMI.DynamicIndexFunc != nil {
		outputs = append(outputs, elasticSearchFactory(
			"ElasticSearchWithTagMap-*",
			eSTMI.DynamicIndexFunc,
			esConfig,
			eSTMI.Level,
			append(processors, processor.PrintOnlyIfNotTaggedWith(tags...))...,
		))
	}

	return outputs
}

// ElasticSearchWithDynamicIndex is a built-in `output` - named
// `ElasticSearchWithDynamicIndex` that writes to ElasticSearch. It allows to
// define a function that returns the index name to be used, evaluated at the
// index time.
//
// NOTE: By default, data is JSON-formatted.
// NOTE: Document ID is automatically generated by hashing the message's content
// avoiding duplicate documents.
// NOTE: It's the caller's responsibility to create the index, define its
// mapping, and settings.
func ElasticSearchWithDynamicIndex(
	dynamicIndexFunc ElasticSearchDynamicIndexFunc,
	esConfig ElasticSearchConfig,
	maxLevel level.Level,
	processors ...processor.IProcessor,
) IOutput {
	return elasticSearchFactory(
		fmt.Sprintf("ElasticSearchWithDynamicIndex-%s", dynamicIndexFunc()),
		dynamicIndexFunc,
		esConfig,
		maxLevel,
		processors...,
	)
}
